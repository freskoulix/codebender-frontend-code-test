<script>
$(function () {

    /* Editor object */
    var Editor = {};
    Editor.searchFlag = false; // flag used to enable Google search

    /* Autosaving */
    Editor.changeFlag = false; // flag for changed content
    Editor.timerCounter = 0; // timer after last change
    Editor.Range = ace.require('ace/range').Range;
    Editor.last_selection = null;
    Editor.marker_id = null;
    Editor.marker_flag = false;
    Editor.last_row = null;
    Editor.search_flag = false;
    Editor.library = null;

    // Auto save ajax call, sync editor's contents with user session
    Editor.autosave = function () {
        var data = Editor.editor.getValue();
        var url = $('#editor-contents').data('action');
        $('#autosave').show();
        var dfd = $.ajax({
            url: url,
            method: 'POST',
            data: {'data': data},
            success: function (data, textStatus, jqXHR) {
                $('#editor-contents').text(data);
                $('#autosave').fadeTo(500, 0.5, function () {
                    $(this).hide();
                });
            }
        });
    }
    // Timer for changed contents (auto saves when idle for 3 sec after change)
    Editor.timerAction = function () {
        if (Editor.changeFlag) {
            Editor.timerCounter += 1;
        }

        if (Editor.timerCounter > 3) {
            Editor.autosave();
            Editor.timerCounter = 0;
            Editor.changeFlag = false;
        }
    }
    Editor.timer = setInterval(Editor.timerAction, 1000);

    // Editor initialization
    Editor.init = function () {
        Editor.editor = ace.edit('editor');
        Editor.editor.setTheme('ace/theme/github'); // editor's theme
        Editor.editor.getSession().setMode('ace/mode/c_cpp'); // editor's syntax highlighting
        Editor.editor.setHighlightActiveLine(true); // highlight active line in editor

        // Initialize editor's content
        // TODO: Find a better method to pass the template from the controller.
        // Current behaviour: Special value: ###Init### is initialized in the controller,
        //                    in order to use the template.
        if ($('#editor-contents').text() == '###Init###') {
            Editor.editor.setValue('// Write your code here\n\nvoid setup () {\n}\n\nvoid loop () {\n}\n');
        }
        else {
            Editor.editor.setValue($('#editor-contents').text());
        }

        /* Handle editor's events */
        Editor.editor.on('change', function (e) {
            Editor.timerCounter = 0;
            Editor.changeFlag = true;
        });

        $('#editor').on('keydown', function (e) {
            if (e.keyCode == 18) {
                Editor.searchFlag = true;
            }
        })
        .on('keyup', function (e) {
            if (e.keyCode == 18) {
                Editor.searchFlag = false;
            }
        })
        .on('click', function (e) {
            if (Editor.searchFlag) {
                var position = Editor.editor.getCursorPosition();
                var token = Editor.editor.session.getTokenAt(position.row, position.column);
                if (token) {
                    query = token.value;
                    if (query) {
                        // TODO: Fix window.open for Chrome
                        // Note: Chrome, needs window.open to be executed immediately,
                        //       after onClick event.
                        window.open('https://www.google.com/#q='+query, 'GoogleSearch');
                        Editor.searchFlag = false;
                    }
                }
            }
        });

        Editor.editor.on('mousemove', function (e) {
            var position = e.getDocumentPosition();
            var line = Editor.editor.session.getLine(position.row);
            var header_re = /#include/g;
            var check = header_re.exec(line);
            if (check !== null) {
                var token_re = /(#include <|")(.+)(>|")/;
                var token = token_re.exec(line);
                function indexOfGroup(match, n) {
                    var ix= match.index;
                    for (var i= 1; i<n; i++)
                        ix+= match[i].length;
                    return ix;
                }
                var token_start = indexOfGroup(token, 2);
                var token_end = token_start + token[2].length;

                var range = new Editor.Range(position.row, token_start, position.row, token_end);

                if (Editor.last_row != position.row) {
                    if (Editor.marker_id) {
                        Editor.editor.getSession().removeMarker(Editor.marker_id);
                    }
                    Editor.marker_id = Editor.editor.getSession().addMarker(range, 'selected-header', 'text');
                    $('#editor').find('.ace_content').addClass('selected');
                    Editor.marker_flag = true;
                }
                else if (!Editor.marker_flag) {
                    Editor.marker_id = Editor.editor.getSession().addMarker(range, 'selected-header', 'text');
                    $('#editor').find('.ace_content').addClass('selected');
                    Editor.marker_flag = true;
                }

                Editor.library = line.replace(/#include|\.h|<|>|"/g, '');
                Editor.search_flag = true;
            }
            else {
                if (Editor.marker_id !== null && Editor.marker_flag) {
                    Editor.editor.getSession().removeMarker(Editor.marker_id);
                    $('#editor').find('.ace_content').removeClass('selected');
                    Editor.marker_id = null;
                    Editor.marker_flag = false;
                }
                Editor.search_flag = false;
            }
        });
    }

    $('#editor').on('click', function (e) {
        if (Editor.search_flag &&
            Editor.library !== null) {
            var jqXHR = $.ajax({
                url: '{{ path("library") }}',
                type: 'POST',
                data: {'library': Editor.library},
                dataType: 'json',
                success: function (data, textStatus, jqXHR) {
                    if (data.status) {
                        window.open(data.url);
                    }
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    console.log('Error: ', errorThrown);
                },
            });
        }
    });

    /* Compiler object */
    var Compiler = {};

    // Compiler initialization
    Compiler.init = function () {
        // compilerflasher variable needs to be on the global namespace
        compilerflasher = new compilerflasher(function () {
            return {'sketch.ino': Editor.editor.getValue()}
        });

        /* Handle compiler's events */
        // Clear the status bar before verification
        compilerflasher.on('pre_verify', function () {
            Editor.autosave();

            $('#status').html('');
        });

        // Set the status bar after successful verification
        compilerflasher.on('verification_succeed', function(binary_size) {
            $('#status').html('Binary size: '+binary_size+' bytes');
        });

        // Set the status bar after failed verification
        compilerflasher.on('verification_failed', function(error_output) {
            $('#status').html(error_output);
        });
    }

    // Initialize objects
    Editor.init();
    Compiler.init();

});
</script>
